name: Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest
    environment: Test  # This is the name of the environment to deploy to

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env
          echo "SNOWTRACE_API_KEY=${{ secrets.SNOWTRACE_API_KEY }}" >> .env
          echo "COINMARKETCAP_API_KEY=${{ secrets.COINMARKETCAP_API_KEY }}" >> .env
          echo "INFURA_API_KEY=${{ secrets.INFURA_API_KEY }}" >> .env
          echo "DATAHUB_API_KEY=${{ secrets.DATAHUB_API_KEY }}" >> .env
          echo "REPORT_GAS=${{ secrets.REPORT_GAS }}" >> .env
          echo "EVM_LOGGING=${{ secrets.EVM_LOGGING }}" >> .env
          echo "DEPLOYER_PK=${{ secrets.DEPLOYER_PK }}" >> .env
          echo "TOKEN_OWNER_PK=${{ secrets.TOKEN_OWNER_PK }}" >> .env
          echo "PROD_DEPLOYER_PK=${{ secrets.PROD_DEPLOYER_PK }}" >> .env
          echo "POLYGONSCAN_API_KEY=${{ secrets.POLYGONSCAN_API_KEY }}" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Generate documentation
        run: npx hardhat docgen

      - name: Run tests
        run: npx hardhat test

      # # Deploy to Polygon Mumbai if tests pass
      # - name: Deploy to Polygon Mumbai
      #   run: npx hardhat deploy --network polygonMumbai

      # ... (previous steps)

      # Deploy to Polygon Mumbai if tests pass
      - name: Deploy to Polygon Mumbai
        id: deploy
        run: npx hardhat deploy --network polygonMumbai

      # Update DEPLOYMENTS.md with addresses from artifacts
      - name: Update DEPLOYMENTS.md from artifacts
        run: |
          echo "## Deployments on Polygon Mumbai" > DEPLOYMENTS.md
          echo "" >> DEPLOYMENTS.md
          
          # Navigate to the artifacts directory
          cd artifacts
          
          # For each contract JSON file, extract the address for Polygon Mumbai
          for FILE in *.json; do
            CONTRACT_NAME=$(basename "$FILE" .json)
            # Assuming the network ID for Polygon Mumbai is 80001 (change if different)
            CONTRACT_ADDRESS=$(jq '.networks."80001".address' $FILE)
            if [ "$CONTRACT_ADDRESS" != "null" ]; then
              echo "- **$CONTRACT_NAME**: $CONTRACT_ADDRESS" >> ../DEPLOYMENTS.md
            fi
          done
          
          # Navigate back to the root directory
          cd ..


      # Commit the updated DEPLOYMENTS.md to a new branch
      - name: Commit to a new branch and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create a new branch
          BRANCH_NAME=update-deployments-$(date +'%Y%m%d%H%M%S')
          git checkout -b $BRANCH_NAME
          
          # Commit and push the changes
          git add DEPLOYMENTS.md
          git commit -m "Update DEPLOYMENTS.md with new contract addresses"
          git push origin $BRANCH_NAME
          
          # Create a pull request using GitHub API
          curl -s -X POST \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d '{"title":"Update DEPLOYMENTS.md with new contract addresses","head":"'$BRANCH_NAME'","base":"main"}' \
               https://api.github.com/repos/investtools/ivttoken/pulls
